#!/usr/bin/env python3
"""pass-rotate

Usage:
  pass-rotate <accounts>...
  pass-rotate --list-accounts
  pass-rotate --list-providers
  pass-rotate --list-options <provider>

Options:
  --list-accounts   Print all configured accounts
  --list-providers  Print all supported service providers and exit
  --list-options    Prints options for the specified provider and exit
  --config=<file>   Specify an alternate config file (default: ~/.config/pass-rotate.ini)
"""

from passrotate import PassRotate
from configparser import ConfigParser
from docopt import docopt
import traceback
import subprocess
import sys
import os
from getpass import getpass

from passrotate.exceptions import PrepareException, ExecuteException

args = docopt(__doc__, version='pass-rotate 1.0')

pass_rotate = PassRotate()

if args["--list-providers"]:
    providers = sorted(pass_rotate.get_providers(), key=lambda p: p.name)
    print("{:<24} {:<24}\n".format("Domain", "Provider"))
    for p in providers:
        for d in p.domains:
            print("{:<24} {:<24}".format(d, p.name))
    sys.exit()

if args["--list-options"]:
    provider = pass_rotate.get_provider_class(args["<provider>"])
    if not provider:
        print("Unknown provider")
        sys.exit(1)
    print(provider.name)
    print("\nDomains:")
    for d in provider.domains:
        print("    {}".format(d))
    print("\nUsage:")
    if provider.__doc__.startswith("\n"):
        print(provider.__doc__[1:].rstrip())
    else:
        print(provider.__doc__.rstrip())
    sys.exit()

if os.environ.get("XDG_CONFIG_HOME"):
    xdg_config_location = os.path.join(os.environ.get("XDG_CONFIG_HOME"), "pass-rotate.ini")
else:
    xdg_config_location = None
cfg_path = args.get("--config") or xdg_config_location or os.path.expanduser("~/.config/pass-rotate.ini")
try:
    with open(cfg_path) as f:
        config = ConfigParser()
        config.readfp(f)
except Exception as ex:
    sys.stderr.write(str(ex))
    sys.stderr.write("\nFailed to read config file.\n")
    sys.exit(1)

if args["--list-accounts"]:
    accounts = sorted([
        s for s in config.sections() \
            if s != "pass-rotate" and pass_rotate.get_provider_class(config[s].get("domain") or s)
        ])
    [print(a) for a in accounts]
    sys.exit()

_get_password_cmd = config["pass-rotate"]["get-password"]
_gen_password_cmd = config["pass-rotate"]["gen-password"]
_set_password_cmd = config["pass-rotate"]["set-password"]

def get_password(account):
    env = os.environ
    env.update({ "ACCOUNT": account })
    subp = subprocess.run([_get_password_cmd],
            shell=True, env=env,
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    if subp.returncode != 0:
        raise Exception("get_password command exited with nonzero status code")
    return subp.stdout.decode().strip()

def gen_password(account):
    env = os.environ
    env.update({ "ACCOUNT": account })
    subp = subprocess.run([_gen_password_cmd],
            shell=True, env=env,
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    if subp.returncode != 0:
        raise Exception("gen_password command exited with nonzero status code")
    return get_password(account)

def set_password(account, password):
    env = os.environ
    env.update({"ACCOUNT": account})
    subp = subprocess.Popen([_set_password_cmd],
                          shell=True,
                          env=env,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.STDOUT,
                          stdin=subprocess.PIPE)


    subp.communicate(input="{}\n{}\n".format(password, password).encode("utf-8"))
    if subp.returncode != 0:
        raise Exception("set_password command exited with nonzero status code")

def custom_prompt(prompt, prompt_type):
    return getpass(prompt="\n  " + prompt + ": ")

pass_rotate.set_prompt(custom_prompt)

errs = 0
for account in args.get("<accounts>"):
    if not config.has_section(account):
        print("Error: No account configured for {}".format(account))
        errs += 1
        continue
    cfg = config[account]
    domain = cfg.get("domain") or account
    provider = pass_rotate.get_provider(domain, dict(cfg))
    pass_name = cfg["pass-name"] if "pass-name" in cfg else account
    if not provider:
        provider = pass_rotate.detect_provider(domain, dict(cfg))
    if not provider:
        print("pass-rotate does not have a service provider for {}".format(domain))
        errs += 1
        continue
    sys.stderr.write("Rotating {}... ".format(pass_name))
    sys.stderr.flush()

    # we keep the global exception catching to catch other errors as well
    try:
        old_password = get_password(pass_name)

        try:
            provider.prepare(old_password)
        except PrepareException as e:
            sys.stderr.write("FAIL\n")
            sys.stderr.write("Preparation failed: \"{}\"\n".format(e.args[0]))
            sys.stderr.write("Your password stays unchanged, skipping {}...".format(account))
            sys.stderr.flush()
            errs +=1
            continue


        try:
            new_password = gen_password(pass_name)
            provider.execute(old_password, new_password)
        except ExecuteException as e:
            sys.stderr.write("FAIL\n")
            sys.stderr.write("Execution failed: \"{}\"\n".format(e.args[0]))
            sys.stderr.write("Reverting the updated password in your password-store... ")
            sys.stderr.flush()

            set_password(pass_name, old_password)

            sys.stderr.write("done\n")
            sys.stderr.flush()
            errs +=1
            continue

        sys.stderr.write("OK\n")
    except:
        sys.stderr.write("FAIL\n")
        sys.stderr.write(traceback.format_exc())
        sys.stderr.write("\nFailed to rotate {}\n".format(account))
        errs += 1
    sys.stderr.flush()
sys.exit(errs)
